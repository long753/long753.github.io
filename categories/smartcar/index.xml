<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>SmartCar - Category - LONG</title><link>https://long753.github.io/categories/smartcar/</link><description>SmartCar - Category - LONG</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>cl2848077709@outlook.com (Chen Long)</managingEditor><webMaster>cl2848077709@outlook.com (Chen Long)</webMaster><lastBuildDate>Mon, 06 Oct 2025 23:26:12 +0800</lastBuildDate><atom:link href="https://long753.github.io/categories/smartcar/" rel="self" type="application/rss+xml"/><item><title>Smart Car Workflow</title><link>https://long753.github.io/posts/smartcar_workflow/</link><pubDate>Mon, 06 Oct 2025 23:26:12 +0800</pubDate><author>cl2848077709@outlook.com (Chen Long)</author><guid>https://long753.github.io/posts/smartcar_workflow/</guid><description>1.open the car 首先，观察小车的上位机，主控，驱动板的开关是否处于关闭状态（分别位于小车的左右两边）。其次，把电源插上，注意观察电池的电压，要在11.6v到12.6v之间，不要过充过放。最后，打开那三个开关，等待edgeboard上的指示灯显示为绿色，小车成功启动。 2.连接电脑 2.1.1 有线连接（第一次连接优先这种方式） 用网线连接电脑和智能小车 打开终端，输入指令：（有可能连接不上，多试几次） ssh edgeboard@paddlepi 然后输入密码：edgeboard，即可连接成功。
2.1.2 有线连接(路由器连接方式) 用网线连接路由器和智能小车，同时电脑也连接这个路由器，进入路由器的管理界面，找到智能小车的IP地址。 在电脑上打开终端，输入指令： ssh edgeboard@paddlepi #换成对应的ip地址 输入edgeboard的密码：edgeboard，即可连接成功。 2.2 无线连接（最常用） 第一次无线连接时：保证有线连接成功，然后在终端中输入
sudo nmtui 然后点击active connect连接你的热点即可。
如果不是第一次连接，只需打开手机热点让算力版连接到你的热点即可。
打开终端，输入指令：（有可能连接不上，多试几次）
ssh edgeboard@paddlepi 密码：edgeboard
3.连接vscode 3.1安装插件 首先在vscode里面安装Remote - SSH，这一步很ez
3.2.在插件里面点进car-work 点击ssh-remote的“+”号 在输入栏中输入： ssh edgeboard@paddlepi 密码：edgeboard 一直允许，配置文件点第一个就可以了（记住这个配置文件的位置） 在vscode里面打开car-work文件夹 /home/edgeboard/car-work 注意：这里很有可能会连接失败，经过我的多次测试，我发现有两个可能，第一个是你的vscode版本太高，你去下载一个相对老一点版本的VScode就可以了，第二种情况可以通过下面的方式的解决： ![[Pasted image 20250429000335.png]] 点击上面图片中的扩展设置，将下面的这个路径改成你当时用ssh连接时的算力版的配置文件，忘记了也没事，你可以通过ssh中的查看配置来找到这个文件，而且大概率也跟我的路径差不多 ![[Pasted image 20250429000429.png]] 之后你只需要点击并输入密码即可连接
4.打开VNC图形化界面 如果你还没有安装VNC，请打开网址https://www.realvnc.com/en/connect/download/viewer/，安装windows版本的VNC客户端，并按照安装提示安装好。
进入edgeboard终端后，输入指令：
vncserver :1 -localhost no 其中：:1表示图形化界面端口号，可以自行设置。优先使用1号端口，当端口被占用时，可以尝试其他端口,只使用1~4号端口。
当出现下面的提示则说明启动成功：
vnc vnc vnc vnc 然后打开VNC,建立新的连接：（如果连接过，直接点你原来建立的就ok）
vncserver：paddlepi:5901 name: edgeboard 同时，如果使用的不是1端口，例如是2端口，对应的应该为：vncserver：paddlepi:5902 进入后输入密码：edgeboard</description></item><item><title>Smart Car Innovation</title><link>https://long753.github.io/posts/smarcar_innovitation/</link><pubDate>Mon, 06 Oct 2025 23:26:12 +0800</pubDate><author>cl2848077709@outlook.com (Chen Long)</author><guid>https://long753.github.io/posts/smarcar_innovitation/</guid><description>这篇文档的内容是一些可能可以提高车模上限的方案。
一、机械结构部分 机械结构决定了车模上限！！！！！一定要非常无敌的重视机械结构！！！！
1.轮胎处理 车模原始轮胎非常的不好使用，很容易打滑。因此对轮胎进行处理是十分有必要的。 首先，原始的轮胎里面是空的，我们需要先给轮胎在轮胎里面塞一些海绵，保证轮胎可以鼓起来。之后，我们就可以用砂纸对轮胎进行打磨处理，把轮胎打磨的尽可能粗糙。最后，对轮胎进行软化处理。
2.舵机（前总成）处理 根据杭电佬的操作，似乎把舵机连接的那个杆整水平可以提高舵机的响应速度？我们没试过，你们可以试一试，然后为了车身水平，后轮也需要进行相同的处理，这样还可以进一步的降低整体的重心。
3.差速器（后总成）处理 差速器的第一个要处理的地方就上油，给差速器上润滑油，可以防止差速器卡顿。 其次就是要对轮胎位置进行处理 后轮安装：后轮的两个垫片都需要按上去！！！ 处理的好的标准：电机以特定速度空转时，不会发生异响并保持速度稳定（当然前提是你电机PID调好了）
4.重心 重心也是一个特别无敌关键的点，它确定了你的速度上限，但如果你的速度慢还没有发生侧翻的情况，应该先提速而不是先搞这个。当你的重心较高时，车模突然转向就非常容易发生侧翻，特别是速度还很快的时候。这个可以通过合理布局实现，尽量不要让这个成为你们车模的速度限制点。 下面是几个可以实现重心降低的方案：
建议使用主驱一体设计，左右两边一边放主驱一体的板子，一边放算力板。 电池平放，不要立着放（似乎非常困难，这对画板子的要求特别高，但是杭电佬做到了，你们也可以） 车壳高度尽可能紧贴车模机架，中间只保留部分空间用于排线，因此排线也特别重要！！！ 5.摄像头 使用120+°、320×240，120+帧的摄像头，这非常重要！！！不要怕贵！！！我们是110度摄像头，环内元素看不到，对此我们进行了许多不必要的处理，你们不要再用110度摄像头了！！！ 摄像头需要标定，这个网上有相关的资料，反正底下不要看到太多车头，上面不要看到赛道外面太多的东西。确定好摄像头位置后，就把摄像头固定下来，防止摄像头松动导致参数的变化。
二、算法部分 1.基础巡线</description></item></channel></rss>